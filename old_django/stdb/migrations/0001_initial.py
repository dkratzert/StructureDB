# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-27 10:31
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import stdb.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Colours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('colour', models.PositiveSmallIntegerField(choices=[(1, 'Select a colour'), (2, 'colourless'), (3, 'white'), (4, 'yellow'), (5, 'red'), (6, 'green'), (7, 'blue'), (8, 'brown'), (9, 'black'), (10, 'violet'), (11, 'purple'), (12, 'pink'), (13, 'other')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('flask_name', models.CharField(max_length=200)),
                ('formula', models.CharField(max_length=200)),
                ('machine', models.CharField(max_length=200)),
                ('operator', models.CharField(max_length=200, verbose_name='Who measured the structure?')),
                ('picked_at', models.IntegerField(default=0, verbose_name='Crystals picked at which temperature?')),
                ('measure_date', models.DateField(verbose_name='date measured')),
                ('measured_for', models.CharField(blank=True, max_length=120, verbose_name='Customer')),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('ak', models.CharField(blank=True, max_length=120, verbose_name='Workgroup')),
                ('received', models.DateField(blank=True, null=True, verbose_name='date received')),
                ('output', models.DateField(blank=True, null=True, verbose_name='date outgoing')),
                ('crystal_size_x', models.FloatField(blank=True, default=0, max_length=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('crystal_size_y', models.FloatField(blank=True, default=0, max_length=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('crystal_size_z', models.FloatField(blank=True, default=0, max_length=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('colour', models.CharField(blank=True, max_length=20)),
                ('is_publishable', models.BooleanField(default=False)),
                ('service_structure', models.BooleanField(default=False)),
                ('comment', models.TextField(blank=True, max_length=2000)),
                ('cell_a', models.FloatField(blank=True, default=0, max_length=8, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)], verbose_name='a')),
                ('cell_b', models.FloatField(blank=True, default=0, max_length=8, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)], verbose_name='b')),
                ('cell_c', models.FloatField(blank=True, default=0, max_length=8, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)], verbose_name='c')),
                ('alpha', models.FloatField(blank=True, default=0, max_length=8, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(180)])),
                ('beta', models.FloatField(blank=True, default=0, max_length=8, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(180)])),
                ('gamma', models.FloatField(blank=True, default=0, max_length=8, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(180)])),
                ('R1_all', models.FloatField(blank=True, max_length=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('wR2_all', models.FloatField(blank=True, max_length=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('R1_2s', models.FloatField(blank=True, max_length=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('wR2_2s', models.FloatField(blank=True, max_length=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('density', models.FloatField(blank=True, max_length=5, null=True, verbose_name='density (calc)')),
                ('mu', models.FloatField(blank=True, max_length=5, null=True, verbose_name='absorption [mm-1]')),
                ('formular_weight', models.FloatField(blank=True, max_length=8, null=True, verbose_name='Formular weight')),
                ('shape', models.CharField(blank=True, max_length=20)),
                ('temperature', models.FloatField(blank=True, default=0, max_length=5, null=True, verbose_name='Temperature [K]')),
                ('crystal_system', models.CharField(blank=True, max_length=15)),
                ('space_group', models.CharField(blank=True, max_length=15)),
                ('volume', models.FloatField(blank=True, max_length=5, null=True)),
                ('z', models.IntegerField(blank=True, null=True)),
                ('fnull', models.IntegerField(blank=True, null=True)),
                ('wavelength', models.FloatField(blank=True, max_length=10, null=True)),
                ('radiation_type', models.CharField(blank=True, max_length=18)),
                ('theta_min', models.FloatField(blank=True, max_length=10, null=True)),
                ('theta_max', models.FloatField(blank=True, max_length=10, null=True)),
                ('measured_refl', models.IntegerField(blank=True, null=True)),
                ('completeness', models.IntegerField(blank=True, null=True)),
                ('indep_refl', models.IntegerField(blank=True, null=True)),
                ('refl_used', models.IntegerField(blank=True, null=True)),
                ('r_int', models.FloatField(blank=True, max_length=10, null=True)),
                ('parameters', models.IntegerField(blank=True, null=True)),
                ('restraints', models.IntegerField(blank=True, null=True)),
                ('peak', models.FloatField(blank=True, max_length=10, null=True)),
                ('hole', models.FloatField(blank=True, max_length=10, null=True)),
                ('goof', models.FloatField(blank=True, max_length=10, null=True)),
                ('cif_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='CIF File')),
                ('fcf_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='fcf File')),
                ('res_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='RES File')),
                ('raw_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='raw/mul_file')),
                ('p4p_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='p4p File')),
                ('abs_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='abs File')),
                ('eps_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='abs File')),
                ('ls_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='name_0m._ls File')),
                ('pdf_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='Checkfif File')),
                ('checkcif_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='checkcif File')),
                ('hkl_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='hkl File')),
                ('sfrm_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='one Frame')),
                ('cht_file', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='name .cht file')),
                ('other_file1', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='other File')),
                ('other_file2', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='other File')),
                ('other_file3', models.FileField(blank=True, upload_to=stdb.models.get_filename, verbose_name='other File')),
            ],
            options={
                'ordering': ['-measure_date', '-name'],
            },
        ),
        migrations.CreateModel(
            name='Machines',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='machines', to='stdb.Dataset')),
            ],
        ),
        migrations.AddField(
            model_name='colours',
            name='name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stdb.Dataset'),
        ),
    ]
